package com.lzz.util;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Map;

/**
 * Created by lzz on 2017/7/30.
 */
public class SqlUtil {
    private static volatile JdbcTemplate jdbcTpl;
    private static byte[] lock = new byte[0];

    private static JdbcTemplate getInstance(){
        if( null == jdbcTpl ){
            synchronized ( lock ){
                if( null == jdbcTpl ){
                    ApplicationContext ctx = new ClassPathXmlApplicationContext("applicationContext.xml");
                    jdbcTpl = (JdbcTemplate) ctx.getBean("jdbcTemplate");
                }
            }
        }
        return jdbcTpl;
    }

    /**
     *  插入一条数据
     * @param sql
     * @return 插入的 ID
     */
    public static int insertId(String sql){
        KeyHolder keyHolder = new GeneratedKeyHolder();
        getInstance().update(new PreparedStatementCreator() {
            public PreparedStatement createPreparedStatement(Connection con) throws SQLException
            {
                PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                return ps;
            }
        }, keyHolder);
        return keyHolder.getKey().intValue();
    }

    public static int insert(String sql){
        int res = getInstance().update(sql);
        return res;
    }

    public static int update(String sql){
        int res = getInstance().update(sql);
        return res;
    }

    /**
     * 获取 roles 列表
     * @return
     */
    public static List select(String sql){
        List list = getInstance().queryForList(sql);
        return list;
    }

    public static boolean delete( String sql ){
        int i = getInstance().update( sql );
        if( i > 0 ){
            return true;
        }
        return false;
    }

    public static Map selectRow(String sql ){
        Map map;
        try{
            map = getInstance().queryForMap( sql );
        }catch (Exception e){
            map = null;
        }
        return map;
    }

    public static void initDb(){
        // 创建 node 表
        getInstance().execute("CREATE TABLE if not exists node(" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL PRIMARY KEY, " +
                "clusterid VARCHAR(100), " +
                "ip VARCHAR(25), " +
                "port int, " +
                "username VARCHAR(30), " +
                "password VARCHAR(30), " +
                "server VARCHAR(30), " +
                "install_path VARCHAR(255), " +
                "add_time BIGINT)");
    }

    public void setJdbcTpl(JdbcTemplate jdbcTpl) {
        this.jdbcTpl = jdbcTpl;
    }
}
